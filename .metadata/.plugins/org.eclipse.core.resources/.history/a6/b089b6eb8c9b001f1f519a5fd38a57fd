package bean;

import java.io.IOException;
import java.util.List;
import java.util.Set;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpSession;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import entitee.Classes;
import entitee.Eleve;
import entitee.Personne;
import entitee.Personnel;
import entitee.Professeur;
import entitee.Tuteur;
import metier.Operation;

@ManagedBean
public class PersonneBean {
	
	FacesContext facesContext = FacesContext.getCurrentInstance();
    ExternalContext externalContext = facesContext.getExternalContext();
    HttpSession session = (HttpSession) externalContext.getSession(true);
	
	Personne personne=new Personne();
	
	Operation operation=new Operation();

	public Personne getPersonne() {
		return personne;
	}

	public void setPersonne(Personne personne) {
		this.personne = personne;
	}
	
	public String connexion() {
	    BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
	    Personne foundPersonne = operation.connexion(personne.getLogin());

	    if (foundPersonne == null) {
	        FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Erreur", "Login incorrect.");
	        FacesContext.getCurrentInstance().addMessage(null, message);
	        return null;
	    }

	    // Vérification du mot de passe
	    if (!passwordEncoder.matches(personne.getPassword(), foundPersonne.getPassword())) {
	        FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Erreur", "Mot de passe incorrect.");
	        FacesContext.getCurrentInstance().addMessage(null, message);
	        return null;
	    }

	    try {
	        // Si la connexion est réussie
	        HttpSession session = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(true);

	        switch (foundPersonne.getRole().getNomRole()) {
	            case "ELEVE":
	                System.out.println("Connexion réussie en tant qu'élève");
	                Eleve eleve = operation.getEleve(foundPersonne.getIdPersonne());
	                int nombreAbsences = eleve.getNbAbsences();
	                session.setAttribute("eleve", eleve);
	                session.setAttribute("role", "ELEVE");
	                session.setAttribute("login", foundPersonne.getLogin());
	                session.setAttribute("nomEleve", eleve.getPersonne().getNom()); // Ajout du nom dans la session
	                session.setAttribute("nombreAbsences", nombreAbsences); // Stocker dans la session

	                // Récupération et affichage des classes de l'élève
	                List<Classes> classesEleve = operation.getClassesParEleve(eleve.getIdEleve());
	                session.setAttribute("classesEleve", classesEleve);
	                classesEleve.forEach(classe -> System.out.println("Classe de l'élève : " + classe.getNom()));

	                operation.verifierUtilisateurConnecte(); // Appel de la vérification
	                FacesContext.getCurrentInstance().getExternalContext().redirect("eleve_home.xhtml");
	                break;

	            case "PROFESSEUR":
	                System.out.println("Connexion réussie en tant que professeur");
	                Professeur professeur = operation.getProfesseur(foundPersonne.getIdPersonne());
	                session.setAttribute("prof", professeur);
	                session.setAttribute("role", "PROFESSEUR");
	                session.setAttribute("login", foundPersonne.getLogin());

	                // Appel de getMatieresParProfesseur
	                List<String> matieres = operation.getMatieresParProfesseur(professeur.getIdProfesseur());
	                if (!matieres.isEmpty()) {
	                    session.setAttribute("matiere", matieres.get(0));
	                    matieres.forEach(matiere -> System.out.println("Matière enseignée : " + matiere));
	                } else {
	                    System.out.println("Aucune matière enseignée.");
	                }

	                operation.verifierUtilisateurConnecte(); // Appel de la vérification
	                FacesContext.getCurrentInstance().getExternalContext().redirect("professeur_home.xhtml");
	                break;

	            case "TUTEUR":
	                System.out.println("Connexion réussie en tant que tuteur");

	                // Récupération des informations du tuteur
	                Tuteur tuteur = operation.getTuteur(foundPersonne.getIdPersonne());
	                session.setAttribute("tuteur", tuteur);
	                session.setAttribute("role", "TUTEUR");
	                session.setAttribute("login", foundPersonne.getLogin());

	                // Affichage du nom du tuteur dans la console
	                System.out.println("Tuteur " + tuteur.getPersonne().getNom() + " s'est connecté.");

	                // Récupération et affichage des élèves associés au tuteur
	                Set<Eleve> elevesAssocies = tuteur.getEleves();
	                if (elevesAssocies != null && !elevesAssocies.isEmpty()) {
	                    System.out.println("Élèves sous la responsabilité du tuteur " + tuteur.getPersonne().getNom() + " :");
	                    for (Eleve eleves : elevesAssocies) {
	                        System.out.println("- " + eleves.getPersonne().getNom());
	                    }
	                    session.setAttribute("elevesAssocies", elevesAssocies); // Stockage des élèves dans la session
	                } else {
	                    System.out.println("Ce tuteur n'a aucun élève associé.");
	                }

	                // Redirection vers la page d'accueil du tuteur
	                FacesContext.getCurrentInstance().getExternalContext().redirect("tuteur_home.xhtml");
	                break;

	            case "PRINCIPAL":
	                System.out.println("Connexion réussie en tant que principal");
	                Personnel principal = operation.getPersonnel(foundPersonne.getIdPersonne());
	                session.setAttribute("PRINCIPAL", principal);
	                session.setAttribute("role", "PRINCIPAL");
	                session.setAttribute("login", foundPersonne.getLogin());
	                operation.verifierUtilisateurConnecte(); // Appel de la vérification
	                FacesContext.getCurrentInstance().getExternalContext().redirect("acceuil.xhtml");
	                break;

	            default:
	                System.out.println("Échec de la connexion : rôle inconnu");
	                FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Erreur", "Rôle inconnu.");
	                FacesContext.getCurrentInstance().addMessage(null, message);
	                break;
	        }
	        return null;

	    } catch (IOException e) {
	        e.printStackTrace();
	        return null;
	    }
	}







}
