package bean;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.faces.context.FacesContext;
import javax.faces.application.FacesMessage;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import config.EmailUtil;
import config.PdfUtil;
import entitee.Absence;
import entitee.AbsenceHome;
import entitee.AssoEleveEvaluation;
import entitee.Classes;
import entitee.ClassesHome;
import entitee.Eleve;
import entitee.EleveHome;
import entitee.Personne;
import entitee.PersonneHome;
import entitee.Role;
import metier.Operation;
import entitee.Tuteur;

@ManagedBean
@RequestScoped
public class EleveBean {
    
    private int selectedClasseId;
    private String selectedClasse;

    private List<Classes> classesList = new ArrayList<>();
    private List<Eleve> eleveListe;
    private String nom;
    private String prenom;

    public String getNom() {
        return nom;
    }

    public void setNom(String nom) {
        this.nom = nom;
    }

    public String getPrenom() {
        return prenom;
    }

    public void setPrenom(String prenom) {
        this.prenom = prenom;
    }

    public List<Eleve> getEleveListe() {
        return eleveListe;
    }

    public void setEleveListe(List<Eleve> eleveListe) {
        this.eleveListe = eleveListe;
    }

    Operation op = new Operation();

    @PostConstruct
    private void init() {
        try {
            // Récupération du rôle de l'utilisateur connecté
            String role = (String) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("role");
            
            if ("PRINCIPAL".equals(role)) {
                // Filtrer pour les classes du collège (6e à 3e)
                classesList = op.listeClasseByCycle("moyen");
            } else if ("DIRECTEUR".equals(role)) {
                // Filtrer pour les classes du primaire (CI à CM2)
                classesList = op.listeClasseByCycle("elementaire");
            } else {
                // Si le rôle est autre, par exemple administrateur, montrer toutes les classes
                classesList = op.listeClasse();
            }

            // Charger les élèves par la première classe comme exemple
            if (!classesList.isEmpty()) {
                eleveListe = op.listeEleveClasse(classesList.get(0).getNom());
            }

            // Debug
            System.out.println("Classes loaded: " + classesList.size());
           
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    Classes classes = new Classes();
    ClassesHome classesHome = new ClassesHome();
 
    Eleve e = new Eleve();
    Personne p = new Personne();
    Tuteur t=new Tuteur();
   
    public Eleve getE() {
        return e;
    }

    public void setE(Eleve e) {
        this.e = e;
    }

    public Personne getP() {
        return p;
    }

    public void setP(Personne p) {
        this.p = p;
    }

    PersonneHome ph = new PersonneHome();
    EleveHome eh = new EleveHome();
    Role role = new Role();

    public String inscrire() {
        try {
            // Hacher le mot de passe avant de le persister
            BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
            String hashedPassword = passwordEncoder.encode(p.getPassword());
            p.setPassword(hashedPassword);
            
            // Récupérer la classe sélectionnée
            classes = classesHome.findById(selectedClasseId);
            classes.getEleves().add(e); // Ajouter l'élève à la classe
            classes.setEffectif(classes.getEffectif() + 1); // Incrémenter l'effectif
            e.setClasses(classes); // Associer l'élève à la classe
            
            // Définir les rôles (Élève et Tuteur)
            role = op.getRole("ELEVE"); // Récupérer le rôle d'élève
            p.setRole(role); // Assigner le rôle à la personne
            
            // Persister la personne (élève)
            ph.persist(p);
            e.setPersonne(p); // Associer la personne (utilisateur) à l'élève
            e.setNbAbsences(0); // Initialiser le nombre d'absences
            eh.persist(e); // Persister l'élève
            
            // Mettre à jour la classe
            classes.getEleves().add(e);
            classesHome.merge(classes); // Mettre à jour la classe après ajout de l'élève
            
            // Créer un PDF en mémoire
            String filePath = "D:\\Projets\\JEE\\mail_eleve.pdf"; // Chemin du fichier PDF à créer
            String logoPath = "D:\\Projets\\JEE\\kame.jpg"; // Chemin du logo
            PdfUtil.createPdf(filePath, p, logoPath); // Générer le PDF
            
            // Envoi de l'email de confirmation avec pièce jointe PDF
            String to = p.getEmail();  // Email du destinataire
            String subject = "Inscription réussie avec pièce jointe"; // Sujet de l'email
            String body = "Bonjour " + p.getPrenom() + ",\n\n" +
                          "Votre inscription à l'école est confirmée.\n" +
                          "Merci de nous avoir rejoints ! Veuillez trouver ci-joint votre document PDF.";
            
            // Envoi de l'email avec la pièce jointe
            EmailUtil.sendEmailWithAttachment(to, subject, body, filePath);

            // Affichage du message de confirmation et redirection vers la page de connexion
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Inscription réussie, veuillez vous connecter."));
            return "connexion?faces-redirect=true"; // Redirection après inscription réussie

        } catch (Exception e) {
            // Gestion des erreurs
            e.printStackTrace();
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Erreur", "Erreur lors de l'inscription."));
            return null;  // En cas d'erreur, rester sur la même page
        }
    }

    
    public void chargerEleve() {
        e = eh.findById(selectedClasseId);
    }
    
    public void rechercherEleve() {
        eleveListe = op.RechercheEleve(nom, prenom);
    }
    
    public void rechercherEleveClasse() {
        eleveListe = op.listeEleveClasse(selectedClasse);
    }
    
    public void saveAppele() {
        System.out.println(eleveListe.size());
        AbsenceHome absenceHome = new AbsenceHome();
        for (Eleve eleve : eleveListe) {
            System.out.println(eleve.isEstPresent());
            if (!eleve.isEstPresent()) {
                Absence absence = new Absence();
                absence.setDate(new Date());
                absence.setEleve(eleve);
                absence.setHeured(new Date());
                absence.setHeuref(new Date());
                absence.setJustificatiion(null);
                
                absenceHome.persist(absence);
            }
        }
    }

    public int getSelectedClasseId() {
        return selectedClasseId;
    }

    public void setSelectedClasseId(int selectedClasseId) {
        this.selectedClasseId = selectedClasseId;
    }

    public List<Classes> getClassesList() {
        return classesList;
    }

    public void setClassesList(List<Classes> classesList) {
        this.classesList = classesList;
    }

    public Classes getClasses() {
        return classes;
    }

    public void setClasses(Classes classes) {
        this.classes = classes;
    }

    public String getSelectedClasse() {
        return selectedClasse;
    }

    public void setSelectedClasse(String selectedClasse) {
        this.selectedClasse = selectedClasse;
    }
    
    
}
